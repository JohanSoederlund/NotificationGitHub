How do you set cookies on a public domain/ip when hosting a koa server on localhost and using nginx as a reversed proxy?

etc/nginx/conf.d/175.18.0.1.conf:
server {
    listen 80;
    listen [::]:80;
    server_name 175.18.0.1;

    location /auth {
              proxy_pass http://localhost:3004/auth;
              proxy_pass_header Set-Cookie;
              proxy_cookie_domain localhost 175.18.0.1;
      }

    location /dashboard {
              proxy_pass http://localhost:3002/dashboard;
              proxy_pass_header Set-Cookie;
              proxy_cookie_domain localhost 175.18.0.1;
      }
}

Node server code (KoaJS) authentication server:
router.get("/auth", passport.authenticate('github'), async function (ctx) {

    ctx.cookies.set("mytoken1", "value 1", {domain: "175.18.0.1"});
    ctx.cookies.set("mytoken2", "value 2");
    ctx.redirect('http://175.18.0.1/dashboard')
}

Node server code (KoaJS) dashboard server:
router.get("/dashboard", async function (ctx) {
    console.log(ctx.cookies.get("mytoken1"));
    //output: undefined
    console.log(ctx.cookies.get("mytoken2"));
    //output: undefined
}

Neither of these cookies is visible under 175.18.0.1/dashboard

I tried using https://www.npmjs.com/package/cross-cookies but the code example doesn't seem to be working properly.

This will render Internal server error at first but it will actually set a cookie to 175.18.0.1:
app.use(require('koa-cors')({
  origin: "175.18.0.1",
  credentials: true
}))
 
app.use(require('cross-cookies')())
app.keys = ['zippity', 'doo', 'da']
 
app.use(function *(next) {
  this.crosscookies('token', 'some token');
})

How can I incorporate " this.crosscookies('token', 'some token'); " not as a middle-ware but a way to set cookies dynamically when a user is authenticated after /auth?